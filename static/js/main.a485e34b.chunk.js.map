{"version":3,"sources":["components/Page/components/TogglableInfoBar/components/InfoButton/InfoButton.jsx","components/Page/components/TogglableInfoBar/components/ClosableInfoBar/ClosableInfoBar.jsx","components/Page/components/TogglableInfoBar/TogglableInfoBar.jsx","components/Page/components/InfoBar/InfoBar.jsx","components/Page/components/MainContent/MainContent.jsx","services/strings.js","components/Page/Page.jsx","services/throttleAndDebounce.js","scenes/Home/components/Content/Content.jsx","scenes/Home/HomePage.jsx","Layout.jsx","serviceWorker.js","polyfills.js","index.js"],"names":["InfoButton","_ref","openInfoBar","react_default","a","createElement","className","onClick","aria-hidden","CloseableInfoBar","closeInfoBar","children","useEffect","window","addEventListener","removeEventListener","React","Children","map","child","i","cloneElement","TogglableInfoBar","_useState","useState","_useState2","Object","slicedToArray","opened","setOpened","component","ClosableInfoBar_ClosableInfoBar","components_InfoButton_InfoButton","minToDisplay","InfoBar","sectionNames","currentSection","scrollToSection","sections","sectionName","sectionClicked","key","style","fontWeight","borderBottom","concat","MainContent","createId","string","replace","toLowerCase","Page","content","setCurrentSection","sectionIdsToNamesMap","forEach","objectSpread","defineProperty","determineCurrentSection","sectionIds","candidateCurrentSection","length","sectionId","top","document","getElementById","getBoundingClientRect","innerHeight","isAlreadyCurrentSection","throttledDetermineCurrentSection","func","limit","inThrottle","inDebounce","args","arguments","context","this","apply","setTimeout","clearTimeout","throttleAndDebounce","scrollIntoView","behavior","components_TogglableInfoBar_TogglableInfoBar","components_InfoBar_InfoBar","components_MainContent_MainContent","Section","name","id","Content","_ref2","Content_Section","HomePage","components_Content_Content","components_Page_Page","Layout","Home_HomePage","Boolean","location","hostname","match","smoothscroll","polyfill","ReactDOM","render","src_Layout","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.a485e34b.chunk.js","sourcesContent":["import React from 'react';\nimport './InfoButton.scss'\n\nconst InfoButton = ({openInfoBar}) => (\n    <div className=\"info-button\" onClick={openInfoBar}>\n        <i className=\"fa fa-bars\" aria-hidden=\"true\" />\n    </div>\n);\n\nexport default InfoButton;","import React, {useEffect} from 'react';\nimport './ClosableInfoBar.scss'\n\nconst CloseableInfoBar = ({closeInfoBar, children}) =>  {\n    useEffect(() => {\n        window.addEventListener('scroll', closeInfoBar);\n\n        return () => {\n            window.removeEventListener('scroll', closeInfoBar);\n        };\n    });\n\n\n\n    return (\n        <div className=\"closable-info-bar\">\n            <span className=\"close-button\" onClick={closeInfoBar}>\n                <i className=\"fa fa-times\" />\n            </span>\n            {React.Children.map(children, (child, i) => {\n                return React.cloneElement(child, {closeInfoBar: closeInfoBar})\n            })}\n        </div>\n    );\n};\n\n\nexport default CloseableInfoBar;","import React, { useState } from 'react';\nimport InfoButton from \"./components/InfoButton/InfoButton\";\nimport ClosableInfoBar from \"./components/ClosableInfoBar/ClosableInfoBar\";\nimport './TogglableInfoBar.scss'\n\nconst TogglableInfoBar = ({children}) => {\n    const [opened, setOpened] = useState(false);\n\n    const openInfoBar = () => {\n        setOpened(true);\n    };\n\n    const closeInfoBar = () => {\n        setOpened(false);\n    };\n\n    const component = opened ?\n        <ClosableInfoBar closeInfoBar={closeInfoBar}>{children}</ClosableInfoBar> :\n        <InfoButton openInfoBar={openInfoBar}/>;\n\n    return (\n        <div className=\"togglable-info-bar\">\n            {component}\n        </div>\n    );\n};\n\nexport default TogglableInfoBar;","import React from 'react';\nimport './InfoBar.scss'\n\nexport const minToDisplay = {\n    medium: 'medium-and-larger',\n};\n\nconst InfoBar = (\n    { minToDisplay, sectionNames, currentSection, scrollToSection, closeInfoBar }\n) =>  {\n    const sections = sectionNames.map(sectionName => {\n        const sectionClicked = () => {\n            scrollToSection(sectionName);\n            if (closeInfoBar) {\n                closeInfoBar();\n            }\n        };\n\n        if (sectionName === currentSection) {\n            return (\n                <button\n                    key={sectionName}\n                    onClick={sectionClicked}\n                    style={{fontWeight: \"bold\", borderBottom: \"2px solid\"}}>\n                    {sectionName}\n                </button>\n            )\n        }\n        return (\n            <button onClick={sectionClicked} key={sectionName}>{sectionName}</button>\n        )\n    });\n\n    return (\n        <div className={`info-bar ${minToDisplay ? minToDisplay : ''}`}>\n            {sections}\n        </div>\n    );\n};\n\n\nexport default InfoBar;","import React from 'react';\nimport './MainContent.scss'\n\nconst MainContent = ({children}) => (\n    <div className=\"main-content\">\n        {children}\n    </div>\n);\n\nexport default MainContent;","export const createId = (string) => string.replace(/\\s+/g, '-').toLowerCase();","import React, { useState, useEffect } from 'react';\nimport ToggleableInfoBar from './components/TogglableInfoBar/TogglableInfoBar';\nimport InfoBar, { minToDisplay } from \"./components/InfoBar/InfoBar\";\nimport MainContent from \"./components/MainContent/MainContent\";\nimport {createId} from \"../../services/strings\";\nimport throttleAndDebounce from \"../../services/throttleAndDebounce\";\nimport './Page.scss';\n\nconst Page = ({content, sectionNames}) => {\n    const [currentSection, setCurrentSection] = useState(sectionNames[0]);\n\n    let sectionIdsToNamesMap = {};\n    sectionNames.forEach((sectionName) => {\n        sectionIdsToNamesMap = {...sectionIdsToNamesMap, [createId(sectionName)]: sectionName };\n    });\n\n\n    const isAlreadyCurrentSection = sectionId => sectionId === createId(currentSection);\n\n    const isHighInThePage = (yLocation) => {\n        const windowHeight = window.innerHeight;\n        return yLocation < (2 * windowHeight)/5;\n    };\n\n    const determineCurrentSection = () => {\n        const sectionIds = sectionNames.map(sectionName => createId(sectionName));\n        let candidateCurrentSection = sectionIds[0];\n\n        for(let i = 1; i < sectionIds.length; i++) {\n            const sectionId = sectionIds[i];\n            const top = document.getElementById(sectionId).getBoundingClientRect().top;\n            if(isHighInThePage(top)) {\n                candidateCurrentSection = sectionId;\n            }\n        }\n\n        if(!isAlreadyCurrentSection(candidateCurrentSection)) {\n            setCurrentSection(sectionIdsToNamesMap[candidateCurrentSection]);\n        }\n    };\n\n    const throttledDetermineCurrentSection = throttleAndDebounce(() => {\n        determineCurrentSection();\n    }, 100);\n\n    const scrollToSection = (sectionName) => {\n        document.getElementById(createId(sectionName)).scrollIntoView({\n            behavior: 'smooth'\n        });\n    };\n\n    useEffect(() => {\n        window.addEventListener('scroll', throttledDetermineCurrentSection);\n\n        return function cleanup() {\n            window.removeEventListener('scroll', throttledDetermineCurrentSection);\n        };\n    });\n\n    return (\n         <div className=\"page\">\n            <ToggleableInfoBar>\n                <InfoBar\n                    sectionNames={sectionNames}\n                    currentSection={currentSection}\n                    scrollToSection={scrollToSection}\n                />\n            </ToggleableInfoBar>\n            <InfoBar\n                sectionNames={sectionNames}\n                currentSection={currentSection}\n                scrollToSection={scrollToSection}\n                minToDisplay={minToDisplay.medium}\n            />\n            <MainContent>\n                {content}\n            </MainContent>\n        </div>\n    );\n};\n\nexport default Page;","export default (func, limit) => {\n    let inThrottle;\n    let inDebounce;\n\n    return function() {\n        const args = arguments;\n        const context = this;\n\n        if (!inThrottle) {\n            func.apply(context, args);\n            inThrottle = true;\n            setTimeout(() => inThrottle = false, limit)\n        }\n\n        clearTimeout(inDebounce);\n        inDebounce = setTimeout(() => func.apply(context, args), limit)\n    }\n}","import React from 'react';\nimport \"./Content.scss\";\nimport {createId} from \"../../../../services/strings\";\n\nconst Section = ({name, id}) => (\n    <div id={id} className=\"section\">\n        <h1>{name}</h1>\n    </div>\n);\n\nconst Content = ({sectionNames}) => (\n    <div className=\"content\">\n        {sectionNames.map(sectionName => <Section key={sectionName} name={sectionName} id={createId(sectionName)} />)}\n    </div>\n);\n\n\n\nexport default Content;","import React from 'react';\nimport Page from \"../../components/Page/Page\";\nimport Content from \"./components/Content/Content\";\n\nconst HomePage = () => {\n    const sectionNames = ['About', 'Skills', 'Work Experience', 'Education', 'Contact'];\n    const content = <Content sectionNames={sectionNames}/>;\n\n    return (\n        <div>\n            <Page content={content} sectionNames={sectionNames}/>\n        </div>\n    );\n};\n\nexport default HomePage;","import React from 'react';\nimport './Layout.scss';\nimport './variables.scss'\nimport HomePage from \"./scenes/Home/HomePage\";\n\nfunction Layout() {\n  return (\n    <div className=\"layout\">\n      <HomePage />\n    </div>\n  );\n}\n\nexport default Layout;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. Layout is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import smoothscroll from 'smoothscroll-polyfill';\n\nsmoothscroll.polyfill();","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Layout from './Layout';\nimport * as serviceWorker from './serviceWorker';\nimport './polyfills';\nimport './index.css';\n\nReactDOM.render(<Layout />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}