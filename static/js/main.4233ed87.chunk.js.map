{"version":3,"sources":["components/Page/components/TogglableInfoBar/components/InfoButton/InfoButton.jsx","components/Page/components/InfoBar/InfoBar.jsx","components/Page/components/TogglableInfoBar/components/ClosableInfoBar/ClosableInfoBar.jsx","components/Page/components/TogglableInfoBar/TogglableInfoBar.jsx","components/Page/components/MainContent/MainContent.jsx","components/Page/Page.jsx","scenes/Home/components/Content/Content.jsx","scenes/Home/HomePage.jsx","Layout.jsx","serviceWorker.js","index.js"],"names":["InfoButton","_ref","openInfoBar","react_default","a","createElement","className","onClick","minToDisplay","InfoBar","closeInfoBar","concat","CloseableInfoBar","useEffect","window","addEventListener","removeEventListener","components_InfoBar_InfoBar","TogglableInfoBar","_useState","useState","_useState2","Object","slicedToArray","opened","setOpened","component","ClosableInfoBar_ClosableInfoBar","components_InfoButton_InfoButton","MainContent","children","Page","content","components_TogglableInfoBar_TogglableInfoBar","components_MainContent_MainContent","Section","name","id","Content","Content_Section","HomePage","components_Content_Content","components_Page_Page","Layout","Home_HomePage","Boolean","location","hostname","match","ReactDOM","render","src_Layout","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"0XAQeA,SALI,SAAAC,GAAA,IAAEC,EAAFD,EAAEC,YAAF,OACfC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,cAAcC,QAASL,MCD7BM,eACD,qBASGC,EANC,SAAAR,GAAA,IAAEO,EAAFP,EAAEO,aAAFP,EAAgBS,aAAhB,OACZP,EAAAC,EAAAC,cAAA,OAAKC,UAAS,YAAAK,OAAcH,GAA8B,OCc/CI,EAlBU,SAAAX,GAAqB,IAAnBS,EAAmBT,EAAnBS,aASvB,OARAG,oBAAU,WAGN,OAFAC,OAAOC,iBAAiB,SAAUL,GAE3B,WACHI,OAAOE,oBAAoB,SAAUN,MAKzCP,EAAAC,EAAAC,cAAA,OAAKC,UAAU,qBACXH,EAAAC,EAAAC,cAAA,QAAMC,UAAU,eAAeC,QAASG,IACxCP,EAAAC,EAAAC,cAACY,EAAD,QCSGC,SApBU,WAAM,IAAAC,EACCC,oBAAS,GADVC,EAAAC,OAAAC,EAAA,EAAAD,CAAAH,EAAA,GACpBK,EADoBH,EAAA,GACZI,EADYJ,EAAA,GAWrBK,EAAYF,EAASrB,EAAAC,EAAAC,cAACsB,EAAD,CAAiBjB,aAJvB,WACjBe,GAAU,MAG8DtB,EAAAC,EAAAC,cAACuB,EAAD,CAAY1B,YARpE,WAChBuB,GAAU,MASd,OACItB,EAAAC,EAAAC,cAAA,OAAKC,UAAU,sBACVoB,KCXEG,SANK,SAAA5B,GAAA,IAAE6B,EAAF7B,EAAE6B,SAAF,OAChB3B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,gBACVwB,KCWMC,SAVF,SAAA9B,GAAA,IAAE+B,EAAF/B,EAAE+B,QAAF,OACT7B,EAAAC,EAAAC,cAAA,OAAKC,UAAU,QACXH,EAAAC,EAAAC,cAAC4B,EAAD,MACA9B,EAAAC,EAAAC,cAACY,EAAD,CAAST,aAAcA,IACvBL,EAAAC,EAAAC,cAAC6B,EAAD,KACKF,MCRPG,SAAU,SAAAlC,GAAA,IAAEmC,EAAFnC,EAAEmC,KAAMC,EAARpC,EAAQoC,GAAR,OACZlC,EAAAC,EAAAC,cAAA,OAAKgC,GAAIA,EAAI/B,UAAU,WACnBH,EAAAC,EAAAC,cAAA,UAAK+B,MAeEE,EAXC,kBACZnC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,WACXH,EAAAC,EAAAC,cAACkC,EAAD,CAASF,GAAG,QAAQD,KAAK,UACzBjC,EAAAC,EAAAC,cAACkC,EAAD,CAASF,GAAG,SAASD,KAAK,WAC1BjC,EAAAC,EAAAC,cAACkC,EAAD,CAASF,GAAG,kBAAkBD,KAAK,oBACnCjC,EAAAC,EAAAC,cAACkC,EAAD,CAASF,GAAG,YAAYD,KAAK,cAC7BjC,EAAAC,EAAAC,cAACkC,EAAD,CAASF,GAAG,UAAUD,KAAK,cCDpBI,EAVE,WACb,IAAMR,EAAU7B,EAAAC,EAAAC,cAACoC,EAAD,MAEhB,OACItC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACqC,EAAD,CAAMV,QAASA,MCIZW,MARf,WACE,OACExC,EAAAC,EAAAC,cAAA,OAAKC,UAAU,UACbH,EAAAC,EAAAC,cAACuC,EAAD,QCIcC,QACW,cAA7B/B,OAAOgC,SAASC,UAEe,UAA7BjC,OAAOgC,SAASC,UAEhBjC,OAAOgC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO/C,EAAAC,EAAAC,cAAC8C,EAAD,MAAYC,SAASC,eAAe,SD2H9C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.4233ed87.chunk.js","sourcesContent":["import React from 'react';\nimport './InfoButton.scss'\n\nconst InfoButton = ({openInfoBar}) => (\n    <div className=\"info-button\" onClick={openInfoBar}>\n    </div>\n);\n\nexport default InfoButton;","import React from 'react';\nimport './InfoBar.scss'\n\nexport const minToDisplay = {\n    medium: 'medium-and-larger',\n};\n\nconst InfoBar = ({minToDisplay, closeInfoBar}) =>  (\n    <div className={`info-bar ${minToDisplay ? minToDisplay : ''}`}>\n    </div>\n);\n\n\nexport default InfoBar;","import React, {useEffect} from 'react';\nimport './ClosableInfoBar.scss'\nimport InfoBar from \"../../../InfoBar/InfoBar\";\n\nconst CloseableInfoBar = ({closeInfoBar}) =>  {\n    useEffect(() => {\n        window.addEventListener('scroll', closeInfoBar);\n\n        return () => {\n            window.removeEventListener('scroll', closeInfoBar);\n        };\n    });\n\n    return (\n        <div className=\"closable-info-bar\">\n            <span className=\"close-button\" onClick={closeInfoBar} />\n            <InfoBar />\n        </div>\n    );\n};\n\n\nexport default CloseableInfoBar;","import React, { useState } from 'react';\nimport InfoButton from \"./components/InfoButton/InfoButton\";\nimport ClosableInfoBar from \"./components/ClosableInfoBar/ClosableInfoBar\";\nimport './TogglableInfoBar.scss'\n\nconst TogglableInfoBar = () => {\n    const [opened, setOpened] = useState(false);\n\n    const openInfoBar = () => {\n        setOpened(true);\n    };\n\n    const closeInfoBar = () => {\n        setOpened(false);\n    };\n\n    const component = opened ? <ClosableInfoBar closeInfoBar={closeInfoBar}/> : <InfoButton openInfoBar={openInfoBar}/>;\n\n    return (\n        <div className=\"togglable-info-bar\">\n            {component}\n        </div>\n    );\n};\n\nexport default TogglableInfoBar;","import React from 'react';\nimport './MainContent.scss'\n\nconst MainContent = ({children}) => (\n    <div className=\"main-content\">\n        {children}\n    </div>\n);\n\nexport default MainContent;","import React from 'react';\nimport ToggleableInfoBar from './components/TogglableInfoBar/TogglableInfoBar';\nimport InfoBar, { minToDisplay } from \"./components/InfoBar/InfoBar\";\nimport MainContent from \"./components/MainContent/MainContent\";\nimport './Page.scss'\n\nconst Page = ({content}) => (\n    <div className=\"page\">\n        <ToggleableInfoBar />\n        <InfoBar minToDisplay={minToDisplay.medium}/>\n        <MainContent>\n            {content}\n        </MainContent>\n    </div>\n);\n\nexport default Page;","import React from 'react';\nimport \"./Content.scss\";\n\nconst Section = ({name, id}) => (\n    <div id={id} className=\"section\">\n        <h1>{name}</h1>\n    </div>\n);\n\nconst Content = () => (\n    <div className=\"content\">\n        <Section id=\"About\" name=\"About\" />\n        <Section id=\"Skills\" name=\"Skills\" />\n        <Section id=\"Work-Experience\" name=\"Work Experience\" />\n        <Section id=\"Education\" name=\"Education\" />\n        <Section id=\"Contact\" name=\"Contact\" />\n    </div>\n);\n\n\nexport default Content;","import React from 'react';\nimport Page from \"../../components/Page/Page\";\nimport Content from \"./components/Content/Content\";\n\nconst HomePage = () => {\n    const content = <Content />;\n\n    return (\n        <div>\n            <Page content={content}/>\n        </div>\n    );\n};\n\nexport default HomePage;","import React from 'react';\nimport './Layout.scss';\nimport './variables.scss'\nimport HomePage from \"./scenes/Home/HomePage\";\n\nfunction Layout() {\n  return (\n    <div className=\"layout\">\n      <HomePage />\n    </div>\n  );\n}\n\nexport default Layout;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. Layout is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport Layout from './Layout';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<Layout />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}